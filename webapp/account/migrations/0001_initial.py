# Generated by Django 4.2.16 on 2024-10-08 10:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(db_comment="사용자 이름", max_length=255)),
                (
                    "ip_addr",
                    models.GenericIPAddressField(
                        blank=True, db_comment="접속한 IP 주소", null=True
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, db_comment="마지막 로그인 시간", null=True
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, db_comment="OAuth2 제공자", max_length=50
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        blank=True,
                        db_comment="OAuth2 제공자로부터 받은 고유 ID",
                        max_length=255,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(db_comment="활성화 여부", default=True),
                ),
                (
                    "is_staff",
                    models.BooleanField(db_comment="관리자 여부", default=False),
                ),
                (
                    "is_superuser",
                    models.BooleanField(db_comment="슈퍼유저 여부", default=False),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table_comment": "회원",
            },
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_comment="과목 이름", max_length=255)),
            ],
            options={
                "db_table_comment": "과목 테이블",
            },
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(blank=True, db_comment="이름", max_length=255),
                ),
                (
                    "zipcode",
                    models.CharField(blank=True, db_comment="우편번호", max_length=255),
                ),
                (
                    "addr",
                    models.CharField(blank=True, db_comment="주소", max_length=255),
                ),
                (
                    "detail_addr",
                    models.CharField(blank=True, db_comment="상세주소", max_length=255),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "male"), ("F", "female")], max_length=1
                    ),
                ),
                ("total_like", models.IntegerField(db_comment="좋아요 수", default=0)),
            ],
            options={
                "db_table_comment": "선생님 테이블",
            },
        ),
        migrations.CreateModel(
            name="TeacherSubject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="account.subject",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="account.teacher",
                    ),
                ),
            ],
            options={
                "db_table_comment": "선생님이 가르치는 과목 목록",
            },
        ),
        migrations.CreateModel(
            name="TeacherLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="like_users",
                        to="account.teacher",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="like_teachers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table_comment": "선생님 평판 관리",
            },
        ),
        migrations.AddField(
            model_name="teacher",
            name="like",
            field=models.ManyToManyField(
                related_name="liked_teachers",
                through="account.TeacherLike",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="subject",
            field=models.ManyToManyField(
                related_name="teachers",
                through="account.TeacherSubject",
                to="account.subject",
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                (
                    "phone",
                    models.CharField(blank=True, db_comment="전화번호", max_length=20),
                ),
                (
                    "addr",
                    models.CharField(blank=True, db_comment="주소", max_length=255),
                ),
                (
                    "detail_addr",
                    models.CharField(blank=True, db_comment="상세주소", max_length=255),
                ),
                (
                    "zipcode",
                    models.CharField(blank=True, db_comment="우편번호", max_length=255),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("T", "teacher"), ("S", "student"), ("P", "parent")],
                        db_comment="역할(선생, 학생, 학부모 등)",
                        max_length=50,
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table_comment": "사용자 프로필",
            },
        ),
        migrations.CreateModel(
            name="MessageTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("update_datetime", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(db_comment="템플릿 이름", max_length=255)),
                ("content", models.TextField(db_comment="템플릿 내용")),
                (
                    "is_active",
                    models.BooleanField(db_comment="활성화 여부", default=True),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        db_comment="템플릿 소유자",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="templates",
                        to="account.teacher",
                    ),
                ),
            ],
            options={
                "db_table_comment": "메시지 템플릿",
            },
        ),
        migrations.AddConstraint(
            model_name="teachersubject",
            constraint=models.UniqueConstraint(
                fields=("teacher", "subject"), name="unique_teacher_subject"
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherlike",
            constraint=models.UniqueConstraint(
                fields=("teacher", "user"), name="unique_teacher_user"
            ),
        ),
    ]
